# CHUNK 4: CREATE PERSONAL ASSISTANT MODULE

## CLAUDE CODE PROMPT
You are Claude Code working on the Bridge Template architectural rebuild. Read requests.txt for complete specifications and execute using the granular build system. Work from /Users/eatatjoes/Desktop/ORGANIZE!/BridgeTemplate/ and use the architectural-rebuild branch.

Create the Personal Assistant module as the first test of the UniversalTemplate system. This module demonstrates the template instantiation system working correctly and provides the foundation for testing the new dynamic architecture.

Key requirements:
- Create Personal Assistant module using UniversalTemplate system
- Implement navigable mockup with submodules using template
- Test template instantiation system thoroughly
- Ensure proper CICD automation for new module
- Document all code with Swift DocC comments
- Validate the architectural rebuild foundation

Execute: ./scripts/enhanced-smart-build.sh "create Personal Assistant module using UniversalTemplate"

## DETAILED REQUEST SPECIFICATION

### OBJECTIVE
Create the Personal Assistant module using the validated UniversalTemplate system to test and demonstrate the template instantiation capabilities. This serves as the first real-world test of the architectural rebuild system.

### CRITICAL CONTEXT
This is the first module created using the new UniversalTemplate system Template instantiation system from Chunk 3 should be fully functional Must demonstrate complete CICD automation working Personal Assistant will be mockup functionality with navigation UniversalTemplate provides the foundation for this module creation Process must validate the entire architectural rebuild chain Real Terminal module (v1.3.0) exists as reference for functionality

### TECHNICAL SPECIFICATION

### 1. CREATE PERSONAL ASSISTANT MODULE
**Action**: Use TemplateInstantiator to create the module

```swift
// Test the template instantiation system
let instantiator = TemplateInstantiator()
let request = ComponentCreationRequest(
    name: "PersonalAssistant",
    parentPath: "Modules",
    description: "AI-powered personal assistant for Bridge Template interactions"
)

try await instantiator.instantiateComponent(request)
```

**Expected Result**: `Modules/PersonalAssistant/` directory with complete CICD

### 2. PERSONAL ASSISTANT MODULE IMPLEMENTATION
**File**: `Modules/PersonalAssistant/Sources/PersonalAssistantModule.swift`

Customize the UniversalTemplate to create a functional Personal Assistant:

```swift
/// # Personal Assistant Module
/// 
/// AI-powered personal assistant that helps users interact with Bridge Template
/// through natural language. Provides conversation interface and smart assistance
/// for project management, development tasks, and system navigation.
/// 
/// ## Overview
/// 
/// The Personal Assistant serves as the primary interface for natural language
/// interaction within Bridge Template. Users can:
/// - Ask questions about projects and development
/// - Get help navigating the system
/// - Request automated task creation
/// - Receive intelligent suggestions
/// 
/// ## Topics
/// 
/// ### Core Features
/// - ``ConversationManager``
/// - ``TaskGenerator``
/// - ``ProjectAnalyzer``
/// - ``SmartSuggestions``
/// 
/// ### Submodules
/// - ``TaskManagement``
/// - ``CalendarIntegration``
/// - ``AIChat``
/// - ``VoiceCommands``
/// 
/// ## Usage
/// ```swift
/// let assistant = PersonalAssistantModule()
/// try await assistant.initialize()
/// let response = await assistant.processQuery("Create a new epic for user dashboard")
/// ```
import SwiftUI

public class PersonalAssistantModule: ObservableObject, BridgeModule {
    
    /// Module identifier
    public let id = "com.bridge.personalassistant"
    
    /// Display name for navigation
    public let displayName = "Personal Assistant"
    
    /// SF Symbol icon
    public let icon = "brain.head.profile"
    
    /// Current module version
    public let version = ModuleVersion(major: 1, minor: 0, patch: 0)
    
    /// Conversation manager for AI interactions
    @Published private var conversationManager = ConversationManager()
    
    /// Task generation system
    @Published private var taskGenerator = TaskGenerator()
    
    /// Sub-modules for Personal Assistant functionality
    public var subModules: [String: any BridgeModule] {
        return [
            "task-management": TaskManagementSubModule(),
            "calendar-integration": CalendarIntegrationSubModule(),
            "ai-chat": AIChatSubModule(),
            "voice-commands": VoiceCommandsSubModule()
        ]
    }
    
    /// No dependencies for Personal Assistant
    public let dependencies: [String] = []
    
    /// Main SwiftUI view for Personal Assistant
    public var view: AnyView {
        AnyView(
            PersonalAssistantView(
                conversationManager: conversationManager,
                taskGenerator: taskGenerator
            )
            .environmentObject(self)
        )
    }
    
    /// Initialize Personal Assistant module
    public func initialize() async throws {
        print("ü§ñ Initializing Personal Assistant module v\(version)")
        
        // Initialize conversation system
        await conversationManager.initialize()
        
        // Set up task generation
        await taskGenerator.initialize()
        
        // Initialize submodules
        for (_, subModule) in subModules {
            try await subModule.initialize()
        }
        
        print("‚úÖ Personal Assistant module initialized successfully")
    }
    
    /// Clean up resources
    public func cleanup() async {
        print("üßπ Cleaning up Personal Assistant module")
        
        // Cleanup submodules
        for (_, subModule) in subModules {
            await subModule.cleanup()
        }
        
        // Save conversation state
        await conversationManager.saveState()
        
        print("‚úÖ Personal Assistant cleanup complete")
    }
    
    /// Check if module can be unloaded
    public func canUnload() -> Bool {
        // Allow unloading if no active conversations
        return !conversationManager.hasActiveConversations
    }
    
    /// Handle inter-module messages
    public func receiveMessage(_ message: ModuleMessage) async throws {
        print("üì¨ Personal Assistant received message: \(message.type)")
        
        switch message.type {
        case "generateTasks":
            if let description = message.payload["description"] {
                await generateTasksFromDescription(description)
            }
            
        case "analyzeProject":
            if let projectId = message.payload["projectId"] {
                await analyzeProject(projectId)
            }
            
        case "conversationRequest":
            if let query = message.payload["query"] {
                await processConversationQuery(query)
            }
            
        default:
            print("‚ö†Ô∏è Unknown message type: \(message.type)")
        }
    }
    
    // MARK: - Personal Assistant Functions
    
    /// Generate tasks from natural language description
    private func generateTasksFromDescription(_ description: String) async {
        await taskGenerator.generateTasks(from: description)
    }
    
    /// Analyze project and provide insights
    private func analyzeProject(_ projectId: String) async {
        // Implementation for project analysis
        print("üîç Analyzing project: \(projectId)")
    }
    
    /// Process conversation query
    private func processConversationQuery(_ query: String) async {
        await conversationManager.processQuery(query)
    }
}
```

### 3. CREATE SUBMODULES USING TEMPLATE SYSTEM
**Action**: Create 4 submodules within Personal Assistant

Use the template instantiation system to create:

1. **Task Management SubModule**
```swift
let taskManagementRequest = ComponentCreationRequest(
    name: "TaskManagement",
    parentPath: "Modules/PersonalAssistant",
    description: "Intelligent task creation and management system"
)
```

2. **Calendar Integration SubModule**
```swift
let calendarRequest = ComponentCreationRequest(
    name: "CalendarIntegration", 
    parentPath: "Modules/PersonalAssistant",
    description: "Smart calendar integration and scheduling"
)
```

3. **AI Chat SubModule**
```swift
let aiChatRequest = ComponentCreationRequest(
    name: "AIChat",
    parentPath: "Modules/PersonalAssistant", 
    description: "Natural language conversation interface"
)
```

4. **Voice Commands SubModule**
```swift
let voiceRequest = ComponentCreationRequest(
    name: "VoiceCommands",
    parentPath: "Modules/PersonalAssistant",
    description: "Voice-activated command system"
)
```

### 4. PERSONAL ASSISTANT VIEW IMPLEMENTATION
**File**: `Modules/PersonalAssistant/Sources/PersonalAssistantView.swift`

```swift
/// # Personal Assistant View
/// 
/// Main interface for the Personal Assistant module providing conversation
/// interface, task management, and submodule navigation.
/// 
/// ## Overview
/// 
/// This view presents the Personal Assistant functionality with:
/// - Conversation interface for natural language interaction
/// - Quick access to task generation features
/// - Navigation to specialized submodules
/// - Smart suggestions and recommendations
/// 
/// ## Topics
/// 
/// ### UI Components
/// - ``ConversationView``
/// - ``TaskGenerationView``
/// - ``SubModuleNavigation``
/// - ``SmartSuggestions``
public struct PersonalAssistantView: View {
    
    /// Conversation manager
    @ObservedObject var conversationManager: ConversationManager
    
    /// Task generator
    @ObservedObject var taskGenerator: TaskGenerator
    
    /// Current selected submodule
    @State private var selectedSubModule: String? = nil
    
    /// Show task generation interface
    @State private var showTaskGeneration = false
    
    /// Main view body
    public var body: some View {
        NavigationSplitView {
            // Sidebar with submodules
            subModuleSidebar
        } detail: {
            // Main content area
            if let selectedSubModule = selectedSubModule {
                subModuleDetailView(selectedSubModule)
            } else {
                mainAssistantView
            }
        }
        .navigationTitle("Personal Assistant")
        .toolbar {
            assistantToolbar
        }
    }
    
    /// Sidebar showing submodules
    private var subModuleSidebar: some View {
        List {
            Section("AI Assistant") {
                NavigationLink(
                    destination: ConversationView(manager: conversationManager),
                    label: {
                        Label("AI Chat", systemImage: "bubble.left.and.bubble.right")
                    }
                )
                
                NavigationLink(
                    destination: TaskGenerationView(generator: taskGenerator),
                    label: {
                        Label("Task Generation", systemImage: "checklist")
                    }
                )
            }
            
            Section("Features") {
                ForEach(subModuleItems, id: \.id) { item in
                    NavigationLink(
                        destination: Text(item.name),
                        label: {
                            Label(item.name, systemImage: item.icon)
                        }
                    )
                }
            }
        }
        .listStyle(SidebarListStyle())
    }
    
    /// Main assistant interface
    private var mainAssistantView: some View {
        VStack(spacing: 20) {
            // Welcome header
            VStack(spacing: 12) {
                Image(systemName: "brain.head.profile")
                    .font(.system(size: 64))
                    .foregroundStyle(
                        LinearGradient(
                            colors: [.purple, .blue, .cyan],
                            startPoint: .topLeading,
                            endPoint: .bottomTrailing
                        )
                    )
                
                Text("Personal Assistant")
                    .font(.largeTitle)
                    .fontWeight(.bold)
                
                Text("Your AI-powered development companion")
                    .font(.headline)
                    .foregroundColor(.secondary)
            }
            
            // Quick actions
            LazyVGrid(columns: [
                GridItem(.flexible()),
                GridItem(.flexible())
            ], spacing: 16) {
                quickActionCard(
                    title: "Start Conversation",
                    subtitle: "Chat with AI assistant",
                    icon: "bubble.left.and.bubble.right",
                    color: .blue
                ) {
                    selectedSubModule = "ai-chat"
                }
                
                quickActionCard(
                    title: "Generate Tasks",
                    subtitle: "Create tasks from ideas",
                    icon: "checklist",
                    color: .green
                ) {
                    showTaskGeneration = true
                }
                
                quickActionCard(
                    title: "Task Management",
                    subtitle: "Organize and track work",
                    icon: "folder",
                    color: .orange
                ) {
                    selectedSubModule = "task-management"
                }
                
                quickActionCard(
                    title: "Voice Commands",
                    subtitle: "Hands-free interaction",
                    icon: "mic",
                    color: .purple
                ) {
                    selectedSubModule = "voice-commands"
                }
            }
            
            Spacer()
        }
        .padding()
        .sheet(isPresented: $showTaskGeneration) {
            TaskGenerationView(generator: taskGenerator)
                .frame(minWidth: 600, minHeight: 400)
        }
    }
    
    /// Quick action card
    private func quickActionCard(
        title: String,
        subtitle: String,
        icon: String,
        color: Color,
        action: @escaping () -> Void
    ) -> some View {
        Button(action: action) {
            VStack(spacing: 12) {
                Image(systemName: icon)
                    .font(.system(size: 32))
                    .foregroundColor(color)
                
                VStack(spacing: 4) {
                    Text(title)
                        .font(.headline)
                        .foregroundColor(.primary)
                    
                    Text(subtitle)
                        .font(.caption)
                        .foregroundColor(.secondary)
                }
            }
            .frame(maxWidth: .infinity)
            .padding()
            .background(Color(NSColor.controlBackgroundColor))
            .cornerRadius(12)
        }
        .buttonStyle(.plain)
    }
    
    /// Toolbar for assistant
    private var assistantToolbar: some ToolbarContent {
        ToolbarItemGroup(placement: .primaryAction) {
            Button(action: { showTaskGeneration.toggle() }) {
                Image(systemName: "plus.circle")
            }
            .help("Generate New Tasks")
        }
    }
    
    /// Submodule detail view
    private func subModuleDetailView(_ subModuleId: String) -> some View {
        Text("SubModule: \(subModuleId)")
            .font(.title)
            .frame(maxWidth: .infinity, maxHeight: .infinity)
    }
    
    /// Submodule items for navigation
    private var subModuleItems: [SubModuleItem] {
        [
            SubModuleItem(id: "task-management", name: "Task Management", icon: "folder"),
            SubModuleItem(id: "calendar-integration", name: "Calendar Integration", icon: "calendar"),
            SubModuleItem(id: "ai-chat", name: "AI Chat", icon: "bubble.left.and.bubble.right"),
            SubModuleItem(id: "voice-commands", name: "Voice Commands", icon: "mic")
        ]
    }
}

/// Helper structure for submodule items
private struct SubModuleItem {
    let id: String
    let name: String 
    let icon: String
}
```

### 5. VALIDATION AND TESTING
**Action**: Comprehensive testing of the template system

1. **Template Instantiation Test**:
   - Verify Personal Assistant module created successfully
   - Check all submodules instantiated properly
   - Validate CICD workflows generated correctly

2. **Build Verification**:
   - Personal Assistant module compiles successfully
   - All submodules build independently  
   - Swift DocC documentation generates properly

3. **Integration Test**:
   - Module loads in main Bridge application
   - Navigation between submodules works
   - Template customization applied correctly

### BUILD SCOPE
- Target Level: Module-level creation and testing
- Affected Components: New PersonalAssistant module using UniversalTemplate
- Integration: First real test of template instantiation system
- Dependencies: UniversalTemplate and TemplateInstantiator from previous chunks

### DOCUMENTATION REQUIREMENTS
- Ensure comprehensive Swift DocC comments throughout PersonalAssistant code
- Document template instantiation process with detailed commenting
- Add usage examples and integration patterns with thorough Swift DocC comments
- Create testing documentation with proper commenting for auto-documentation

### SUCCESS CRITERIA
‚úÖ Personal Assistant module created successfully using UniversalTemplate
‚úÖ All 4 submodules instantiated with proper CICD automation
‚úÖ Module compiles and builds successfully with comprehensive Swift DocC comments
‚úÖ Template instantiation system validated through real usage
‚úÖ Navigation and UI integration working properly
‚úÖ Git repositories created with full automation for each component
‚úÖ Swift DocC documentation generated automatically from code comments
‚úÖ Foundation ready for creating remaining modules

### POST-COMPLETION VERIFICATION
- Module Creation: Personal Assistant appears in Modules/ directory
- CICD Validation: GitHub Actions workflows created and functional
- Build Test: swift build passes for Personal Assistant and submodules
- Template Test: UniversalTemplate instantiation system working correctly
- Integration: Module integrates with main Bridge application
- Documentation: Swift DocC comments comprehensive throughout

Execute using granular build system with comprehensive Swift DocC documentation comments throughout all code.